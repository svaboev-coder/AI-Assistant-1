import os
import asyncio
import aiohttp
import json
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

async def test_chutes_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Chutes API"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
        telegram_token = os.getenv('TELEGRAM_BOT_TOKEN')
        chutes_token = os.getenv('CHUTES_API_TOKEN')
        
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤:")
        print(f"Telegram —Ç–æ–∫–µ–Ω: {'‚úÖ –ù–∞–π–¥–µ–Ω' if telegram_token else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}")
        print(f"Chutes —Ç–æ–∫–µ–Ω: {'‚úÖ –ù–∞–π–¥–µ–Ω' if chutes_token else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}")
        
        if not chutes_token:
            print("\n‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω CHUTES_API_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
            print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à API —Ç–æ–∫–µ–Ω Chutes")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Chutes API
        print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ DeepSeek —á–µ—Ä–µ–∑ Chutes...")
        
        headers = {
            "Authorization": "Bearer " + chutes_token,
            "Content-Type": "application/json"
        }
        
        body = {
            "model": "deepseek-ai/DeepSeek-R1",
            "messages": [
                {
                    "role": "system",
                    "content": "–¢—ã –≤–µ–∂–ª–∏–≤—ã–π –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, —Ä–∞–±–æ—Ç–∞—é—â–∏–π –≤ Telegram."
                },
                {
                    "role": "user",
                    "content": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"
                }
            ],
            "stream": True,
            "max_tokens": 100,
            "temperature": 0.7
        }

        response_text = ""
        
        async with aiohttp.ClientSession() as session:
            async with session.post(
                "https://llm.chutes.ai/v1/chat/completions", 
                headers=headers,
                json=body
            ) as response:
                if response.status != 200:
                    print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status}")
                    error_text = await response.text()
                    print(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {error_text}")
                    return False
                
                async for line in response.content:
                    line = line.decode("utf-8").strip()
                    if line.startswith("data: "):
                        data = line[6:]
                        if data == "[DONE]":
                            break
                        try:
                            chunk_data = json.loads(data)
                            if 'choices' in chunk_data and len(chunk_data['choices']) > 0:
                                choice = chunk_data['choices'][0]
                                if 'delta' in choice and 'content' in choice['delta']:
                                    content = choice['delta']['content']
                                    if content:
                                        response_text += content
                        except json.JSONDecodeError:
                            continue
                        except Exception as e:
                            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ chunk: {e}")
                            continue
        
        if response_text.strip():
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ DeepSeek —á–µ—Ä–µ–∑ Chutes —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìù –û—Ç–≤–µ—Ç: {response_text.strip()}")
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek")
            return False
            
    except aiohttp.ClientError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

async def main():
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram-–±–æ—Ç–∞ —Å DeepSeek")
    print("=" * 50)
    
    success = await test_chutes_connection()
    
    if success:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É.")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python deepseek_bot.py")
    else:
        print("\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")

if __name__ == "__main__":
    asyncio.run(main())
